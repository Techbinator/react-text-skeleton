{"version":3,"sources":["../../node_modules/style-inject/dist/style-inject.es.js","../../src/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["css","ref","insertAt","document","head","getElementsByTagName","style","createElement","type","firstChild","insertBefore","appendChild","styleSheet","cssText","createTextNode","dummyText","className","children","skeletonType","classNames","styles","App","useState","setDummyText","text","setText","textAfter","setTextAfter","fontSize","setFontSize","setSkeletonType","useEffect","setTimeout","htmlFor","id","value","onChange","e","target","name","min","max","parseInt","checked","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sSAAA,SAAqBA,EAAKC,QACX,IAARA,IAAiBA,EAAM,IAC5B,IAAIC,EAAWD,EAAIC,SAEnB,GAAKF,GAA2B,qBAAbG,SAAnB,CAEA,IAAIC,EAAOD,SAASC,MAAQD,SAASE,qBAAqB,QAAQ,GAC9DC,EAAQH,SAASI,cAAc,SACnCD,EAAME,KAAO,WAEI,QAAbN,GACEE,EAAKK,WACPL,EAAKM,aAAaJ,EAAOF,EAAKK,YAKhCL,EAAKO,YAAYL,GAGfA,EAAMM,WACRN,EAAMM,WAAWC,QAAUb,EAE3BM,EAAMK,YAAYR,SAASW,eAAed,K,k3DCb9C,I,EAAmD,SAAC,G,IAAEe,EAAA,EAAAA,UAAWC,EAAA,EAAAA,UAAWC,EAAA,EAAAA,SAAU,IAAAC,aAE9EC,EAAa,IAAGF,EAAW,GAAKG,OAF8C,IAAe,EAAf,eAChEJ,EAAY,IAAMA,EAAY,IAGlD,OAAO,0BAAMA,UAAWG,GAAaF,GAAsBF,ICuE9CM,EAjFO,WAAO,IAAD,EACQC,mBAAS,cADjB,mBACnBP,EADmB,KACRQ,EADQ,OAEFD,mBAAS,IAFP,mBAEnBE,EAFmB,KAEbC,EAFa,OAGQH,mBAAS,GAHjB,mBAGnBI,EAHmB,KAGRC,EAHQ,OAIML,mBAAS,IAJf,mBAInBM,EAJmB,KAITC,EAJS,OAKcP,mBAAiC,WAL/C,mBAKnBJ,EALmB,KAKLY,EALK,KAa1B,OANAC,qBAAU,WACRC,YAAW,WACTP,EAAQD,EAAO,GAAK,gBACP,IAAZE,KACF,CAACF,EAAME,IAGR,yBAAKV,UAAU,OACb,6BACA,yCACA,6BACE,2BAAOiB,QAAQ,cAAf,gBACA,2BAAOC,GAAG,aAAa1B,KAAK,OAAO2B,MAAOpB,EAAWqB,SAAU,SAAAC,GAAC,OAAId,EAAac,EAAEC,OAAOH,WAE5F,6BACE,2BAAOF,QAAQ,cAAf,sBACA,2BACEzB,KAAK,SACL+B,KAAK,aACLC,IAAK,EACLC,IAAK,GACLN,MAAOT,EACPU,SAAU,SAAAC,GAAC,OAAIV,EAAae,SAASL,EAAEC,OAAOH,WARlD,aAYA,6BACE,2BAAOF,QAAQ,aAAf,eACA,2BACEzB,KAAK,SACL+B,KAAK,YACLC,IAAK,EACLC,IAAK,GACLN,MAAOP,EACPQ,SAAU,SAAAC,GAAC,OAAIR,EAAYa,SAASL,EAAEC,OAAOH,YAGjD,6BACE,iDACA,2BAAOF,QAAQ,yBAAf,UAEE,2BACEU,QAA0B,YAAjBzB,EACTV,KAAK,QACL0B,GAAG,wBACHC,MAAOjB,EACPqB,KAAK,gBACLH,SAAU,SAAAC,GAAC,OAAIP,EAAgB,eAGnC,2BAAOG,QAAQ,0BAAf,WAEE,2BACEU,QAA0B,aAAjBzB,EACTV,KAAK,QACL0B,GAAG,yBACHC,MAAOjB,EACPqB,KAAK,gBACLH,SAAU,SAAAC,GAAC,OAAIP,EAAgB,iBAIrC,6BACA,8CACA,6BACA,0BAAMxB,MAAO,CAAEsB,aACb,kBAAC,EAAD,CAAYb,UAAWA,EAAWG,aAAcA,GAC7CM,MClESoB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAAS/C,SAASgD,eAAe,SDsI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.8d3ec30c.chunk.js","sourcesContent":["function styleInject(css, ref) {\n  if ( ref === void 0 ) ref = {};\n  var insertAt = ref.insertAt;\n\n  if (!css || typeof document === 'undefined') { return; }\n\n  var head = document.head || document.getElementsByTagName('head')[0];\n  var style = document.createElement('style');\n  style.type = 'text/css';\n\n  if (insertAt === 'top') {\n    if (head.firstChild) {\n      head.insertBefore(style, head.firstChild);\n    } else {\n      head.appendChild(style);\n    }\n  } else {\n    head.appendChild(style);\n  }\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nexport default styleInject;\n","import React from 'react';\n\nimport styles from './styles.css';\n\ninterface SkeletonTextProps {\n  dummyText: string;\n  className?: string;\n  skeletonType?: 'blurred' | 'gradient';\n}\n\nconst SkeletonText: React.SFC<SkeletonTextProps> = ({ dummyText, className, children, skeletonType = 'blurred' }) => {\n  const customClass = className ? ' ' + className : '';\n  const classNames = `${children ? '' : styles[skeletonType]}${customClass}`;\n\n  return <span className={classNames}>{children ? children : dummyText}</span>;\n};\n\nexport default SkeletonText;\n","import React, { useState, useEffect } from 'react';\n\nimport TestPlugin from 'skeleton-text';\n\nconst App: React.FC = () => {\n  const [dummyText, setDummyText] = useState('Dummy text');\n  const [text, setText] = useState('');\n  const [textAfter, setTextAfter] = useState(4);\n  const [fontSize, setFontSize] = useState(20);\n  const [skeletonType, setSkeletonType] = useState<'blurred' | 'gradient'>('blurred');\n\n  useEffect(() => {\n    setTimeout(() => {\n      setText(text ? '' : 'Final text');\n    }, textAfter * 1000);\n  }, [text, textAfter]);\n\n  return (\n    <div className=\"App\">\n      <hr />\n      <h2>Configure</h2>\n      <div>\n        <label htmlFor=\"dummy-text\">Dummy text: </label>\n        <input id=\"dummy-text\" type=\"text\" value={dummyText} onChange={e => setDummyText(e.target.value)} />\n      </div>\n      <div>\n        <label htmlFor=\"text-after\">Final text after: </label>\n        <input\n          type=\"number\"\n          name=\"text-after\"\n          min={1}\n          max={10}\n          value={textAfter}\n          onChange={e => setTextAfter(parseInt(e.target.value))}\n        />\n        second(s)\n      </div>\n      <div>\n        <label htmlFor=\"font-size\">Font size: </label>\n        <input\n          type=\"number\"\n          name=\"font-size\"\n          min={1}\n          max={40}\n          value={fontSize}\n          onChange={e => setFontSize(parseInt(e.target.value))}\n        />\n      </div>\n      <div>\n        <span>Skeleton Type: </span>\n        <label htmlFor=\"blurred-skeleton-type\">\n          Blurred\n          <input\n            checked={skeletonType === 'blurred'}\n            type=\"radio\"\n            id=\"blurred-skeleton-type\"\n            value={skeletonType}\n            name=\"skeleton-type\"\n            onChange={e => setSkeletonType('blurred')}\n          />\n        </label>\n        <label htmlFor=\"gradient-skeleton-type\">\n          Gradient\n          <input\n            checked={skeletonType === 'gradient'}\n            type=\"radio\"\n            id=\"gradient-skeleton-type\"\n            value={skeletonType}\n            name=\"skeleton-type\"\n            onChange={e => setSkeletonType('gradient')}\n          />\n        </label>\n      </div>\n      <hr />\n      <h2>Product demo: </h2>\n      <hr />\n      <span style={{ fontSize }}>\n        <TestPlugin dummyText={dummyText} skeletonType={skeletonType}>\n          {text}\n        </TestPlugin>\n      </span>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}